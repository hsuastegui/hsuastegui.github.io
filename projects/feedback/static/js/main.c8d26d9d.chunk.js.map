{"version":3,"sources":["components/Star.js","components/Rating.js","components/Form.js","components/Graph.js","components/List.js","components/App.js","serviceWorker.js","index.js"],"names":["Star","active","handleClick","value","width","height","viewBox","focusable","className","onClick","d","defaultProps","Stars","setRating","rating","result","i","push","key","propTypes","PropTypes","number","func","Form","handleSubmit","useState","formRef","useRef","ref","onSubmit","e","preventDefault","elements","current","querySelectorAll","data","Object","values","reduce","acc","curr","name","forEach","clearForm","htmlFor","type","required","Rating","Graph","lineData","map","labels","useEffect","Chartist","Line","series","showPoint","lineSmooth","low","high","showArea","id","List","item","comment","initialState","email","App","comments","setComments","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uXAIA,SAASA,EAAT,GAA+C,IAA/BC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,YAAaC,EAAS,EAATA,MAInC,OACE,yBACEC,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,UAAU,QACVC,UAAWP,EAAS,SAAW,GAC/BQ,QAViB,WACnBP,EAAYC,KAWV,0BAAMO,EAAE,sMAKdV,EAAKW,aAAe,CAClBV,QAAQ,EACRC,YAAa,aACbC,MAAO,GASMH,QC9Bf,SAASY,EAAT,GAEE,IAFqC,IAAtBC,EAAqB,EAArBA,UAAWC,EAAU,EAAVA,OACpBC,EAAS,GACNC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAOE,KACL,kBAAC,EAAD,CAAMC,IAAKF,EAAGd,YAAaW,EAAWZ,OAAQe,EAAIF,EAAQX,MAAOa,EAAI,KAGzE,OAAOD,EAGTH,EAAMD,aAAe,CACnBG,OAAQ,EACRD,UAAW,cAGbD,EAAMO,UAAY,CAChBL,OAAQM,IAAUC,OAClBR,UAAWO,IAAUE,MAGRV,Q,MCoBAW,MAvCf,YAAiC,IAAjBC,EAAgB,EAAhBA,aAAgB,EACFC,mBAAS,GADP,mBACvBX,EADuB,KACfD,EADe,KAExBa,EAAUC,iBAAO,MAkBvB,OACE,0BAAMnB,UAAU,OAAOoB,IAAKF,EAASG,SAZtB,SAACC,GAChBA,EAAEC,iBACF,IAAMC,EAAWN,EAAQO,QAAQC,iBAAiB,mBAC5CC,EAAOC,OAAOC,OAAOL,GAAUM,QACnC,SAACC,EAAKC,GAAN,mBAAC,eAAoBD,GAArB,kBAA2BC,EAAKC,KAAOD,EAAKrC,UAC5C,IAEFgC,EAAKrB,OAASA,EACdU,EAAaW,GAdG,SAACH,GACjBnB,EAAU,GACVmB,EAASU,SAAQ,SAACZ,GAChBA,EAAE3B,MAAQ,MAYZwC,CAAUP,OAAOC,OAAOL,MAItB,2BAAOY,QAAQ,QAAf,QACA,2BAAOC,KAAK,OAAOJ,KAAK,OAAOK,UAAQ,IACvC,2BAAOF,QAAQ,SAAf,SACA,2BAAOC,KAAK,QAAQJ,KAAK,QAAQK,UAAQ,IACzC,yCACA,kBAACC,EAAD,CAAQjC,OAAQA,EAAQD,UAAWA,IACnC,2BAAO+B,QAAQ,WAAf,WACA,8BAAUH,KAAK,UAAUK,UAAQ,IACjC,4BAAQD,KAAK,UAAb,U,sBCGSG,MAjCf,YAA0B,IAATb,EAAQ,EAARA,KACTc,EAAWd,EAAKe,KAAI,qBAAGpC,UACvBqC,EAAShB,EAAKe,KAAI,SAACxC,EAAGM,GAAJ,OAAUA,EAAI,KAiBtC,OAhBAoC,qBAAU,WACR,IAAIC,IAASC,KACX,SACA,CACEH,SACAI,OAAQ,CAACN,IAEX,CACEO,WAAW,EACXC,YAAY,EACZC,IAAK,EACLC,KAAM,EACNC,UAAU,MAGb,CAACT,EAAQF,IACL,yBAAKzC,UAAU,QAAQqD,GAAG,W,MCKpBC,MAxBf,YAAyB,IAAT3B,EAAQ,EAARA,KACd,OACE,yBAAK3B,UAAU,QACZ2B,EAAKe,KAAI,SAACa,GAAD,OACR,yBAAK7C,IAAK6C,EAAKjD,OAASiD,EAAKtB,KAAMjC,UAAU,YAC3C,8BAAOuD,EAAKC,SACZ,kBAACjB,EAAD,CAAQjC,OAAQiD,EAAKjD,eCLzBmD,G,MAAe,CACnB,CAAExB,KAAM,OAAQyB,MAAO,iBAAkBpD,OAAQ,EAAGkD,QAAS,eAC7D,CAAEvB,KAAM,OAAQyB,MAAO,iBAAkBpD,OAAQ,EAAGkD,QAAS,iBAmBhDG,MAhBf,WAAgB,IAAD,EACmB1C,mBAASwC,GAD5B,mBACNG,EADM,KACIC,EADJ,KAOb,OACE,yBAAK7D,UAAU,OACb,kBAAC,EAAD,CAAMgB,aANW,SAACW,GACpBkC,EAAY,GAAD,mBAAKD,GAAL,CAAejC,QAMxB,kBAAC,EAAD,CAAOA,KAAMiC,IACb,kBAAC,EAAD,CAAMjC,KAAMiC,MCVEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c8d26d9d.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Star.css\";\n\nfunction Star({ active, handleClick, value }) {\n  const handleRating = () => {\n    handleClick(value);\n  };\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      focusable=\"false\"\n      className={active ? \"active\" : \"\"}\n      onClick={handleRating}\n    >\n      <path d=\"M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z\"></path>\n    </svg>\n  );\n}\n\nStar.defaultProps = {\n  active: false,\n  handleClick: () => {},\n  value: 0,\n};\n\nStar.propTypes = {\n  active: PropTypes.bool,\n  handleClick: PropTypes.func,\n  value: PropTypes.number,\n};\n\nexport default Star;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Star from \"./Star\";\n\nfunction Stars({ setRating, rating }) {\n  const result = [];\n  for (let i = 0; i < 5; i++) {\n    result.push(\n      <Star key={i} handleClick={setRating} active={i < rating} value={i + 1} />\n    );\n  }\n  return result;\n}\n\nStars.defaultProps = {\n  rating: 0,\n  setRating: () => {},\n};\n\nStars.propTypes = {\n  rating: PropTypes.number,\n  setRating: PropTypes.func,\n};\n\nexport default Stars;\n","import React, { useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Rating from \"./Rating\";\nimport \"./Form.css\";\n\nfunction Form({ handleSubmit }) {\n  const [rating, setRating] = useState(3);\n  const formRef = useRef(null);\n  const clearForm = (elements) => {\n    setRating(3);\n    elements.forEach((e) => {\n      e.value = \"\";\n    });\n  };\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const elements = formRef.current.querySelectorAll(\"input, textarea\");\n    const data = Object.values(elements).reduce(\n      (acc, curr) => ({ ...acc, [curr.name]: curr.value }),\n      {}\n    );\n    data.rating = rating;\n    handleSubmit(data);\n    clearForm(Object.values(elements));\n  };\n  return (\n    <form className=\"form\" ref={formRef} onSubmit={onSubmit}>\n      <label htmlFor=\"name\">Name</label>\n      <input type=\"text\" name=\"name\" required />\n      <label htmlFor=\"email\">Email</label>\n      <input type=\"email\" name=\"email\" required />\n      <label>Rating</label>\n      <Rating rating={rating} setRating={setRating} />\n      <label htmlFor=\"comment\">Comment</label>\n      <textarea name=\"comment\" required></textarea>\n      <button type=\"submit\">Send</button>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n};\n\nexport default Form;\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Chartist from \"chartist\";\nimport \"./Graph.css\";\n\nfunction Graph({ data }) {\n  const lineData = data.map(({ rating }) => rating);\n  const labels = data.map((d, i) => i + 1);\n  useEffect(() => {\n    new Chartist.Line(\n      \"#chart\",\n      {\n        labels,\n        series: [lineData],\n      },\n      {\n        showPoint: true,\n        lineSmooth: true,\n        low: 0,\n        high: 5,\n        showArea: true,\n      }\n    );\n  }, [labels, lineData]);\n  return <div className=\"chart\" id=\"chart\"></div>;\n}\n\nGraph.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      email: PropTypes.string,\n      rating: PropTypes.number,\n      comment: PropTypes.string,\n    }).isRequired\n  ),\n};\n\nexport default Graph;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Rating from \"./Rating\";\nimport \"./List.css\";\n\nfunction List({ data }) {\n  return (\n    <div className=\"list\">\n      {data.map((item) => (\n        <div key={item.rating + item.name} className=\"listItem\">\n          <span>{item.comment}</span>\n          <Rating rating={item.rating} />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nList.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      email: PropTypes.string,\n      rating: PropTypes.number,\n      comment: PropTypes.string,\n    }).isRequired\n  ),\n};\n\nexport default List;\n","import React, { useState } from \"react\";\nimport Form from \"./Form\";\nimport Graph from \"./Graph\";\nimport List from \"./List\";\nimport \"./App.css\";\n\nconst initialState = [\n  { name: \"John\", email: \"john@email.com\", rating: 3, comment: \"Lorem ipsum\" },\n  { name: \"Jane\", email: \"jane@email.com\", rating: 2, comment: \"Lorem ipsum\" },\n];\n\nfunction App() {\n  const [comments, setComments] = useState(initialState);\n\n  const handleSubmit = (data) => {\n    setComments([...comments, data]);\n  };\n\n  return (\n    <div className=\"app\">\n      <Form handleSubmit={handleSubmit} />\n      <Graph data={comments} />\n      <List data={comments} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}