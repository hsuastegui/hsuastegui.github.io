{"version":3,"sources":["api/index.js","utils/index.js","components/Row.js","components/Table.js","components/Products.js","components/Search.js","components/App.js","index.js"],"names":["branches","getProducts","a","Promise","all","map","b","fetch","then","responses","r","json","data","reduce","acc","products","catch","e","formatNumber","number","decimals","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","aggregateProducts","curr","row","revenue","unitPrice","sold","hasOwnProperty","id","sortProducts","sortBy","Object","values","sort","itemA","toLowerCase","itemB","Row","item","className","name","Table","key","Products","term","useState","setProducts","useEffect","filter","includes","Search","setTerm","type","onChange","target","value","initialStatus","loading","error","App","setData","status","setStatus","loadData","length","ReactDOM","render","document","getElementById"],"mappings":"qQAAMA,EAAW,CAAC,eAAgB,eAAgB,gBAErCC,EAAW,uCAAG,sBAAAC,EAAA,sEACnBC,QAAQC,IAAIJ,EAASK,KAAI,SAACC,GAAD,OAAOC,MAAM,SAAD,OAAUD,QAClDE,MAAK,SAACC,GAAD,OAAeN,QAAQC,IAAIK,EAAUJ,KAAI,SAACK,GAAD,OAAOA,EAAEC,cACvDH,MAAK,SAACI,GAAD,OACJA,EAAKC,QAAO,SAACC,EAAD,OAAQC,EAAR,EAAQA,SAAR,4BAA2BD,GAA3B,YAAmCC,MAAW,OAE3DC,OAAM,SAACC,GAAD,MAAO,MANS,mFAAH,qD,cCFXC,EAAe,SAACC,GAAD,IAASC,EAAT,uDAAoB,EAApB,OAC1B,IAAIC,KAAKC,aAAa,KAAM,CAC1BC,sBAAuBH,EACvBI,sBAAuBJ,IACtBK,OAAON,IAECO,EAAoB,SAACd,GAAD,OAC/BA,EAAKC,QAAO,SAACC,EAAKa,GAChB,IAAMC,EAAG,eAAQD,GAOjB,OANAC,EAAIC,QAAUF,EAAKG,UAAYH,EAAKI,KAChCjB,EAAIkB,eAAeL,EAAKM,MAC1BL,EAAIG,MAAQjB,EAAIa,EAAKM,IAAIF,KACzBH,EAAIC,SAAWf,EAAIa,EAAKM,IAAIJ,gBAEvBD,EAAIE,UACJ,2BAAKhB,GAAZ,kBAAkBa,EAAKM,GAAKL,MAC3B,KAEQM,EAAe,SAACtB,GAAD,IAAOuB,EAAP,uDAAgB,OAAhB,OAC1BC,OAAOC,OAAOzB,GAAM0B,MAAK,SAAUpC,EAAGI,GACpC,GAAe,SAAX6B,EAAmB,CACrB,IAAMI,EAAQrC,EAAEiC,GAAQK,cAClBC,EAAQnC,EAAE6B,GAAQK,cACxB,OAAID,EAAQE,GACF,EAENF,EAAQE,EACH,EAEF,EAEP,OAAOnC,EAAE6B,GAAUjC,EAAEiC,OCTZO,MAlBf,YAAwB,IAATC,EAAQ,EAARA,KACb,OACE,4BACE,wBAAIC,UAAU,QAAQD,EAAKE,MAC3B,wBAAID,UAAU,SAAS1B,EAAayB,EAAKZ,KAAM,IAC/C,wBAAIa,UAAU,SAAS1B,EAAayB,EAAKd,YCuChCiB,MA3Cf,YAA0B,IAATlC,EAAQ,EAARA,KACf,OACE,+BACE,+BACE,4BACE,wBAAIgC,UAAU,QAAd,WACA,wBAAIA,UAAU,SAAd,cACA,wBAAIA,UAAU,SAAd,aAGJ,+BACGhC,EAAKP,KAAI,SAACsC,GAAD,OACR,kBAAC,EAAD,CAAKI,IAAKJ,EAAKV,GAAIU,KAAMA,QAG7B,+BACE,4BACE,wBAAIC,UAAU,QAAd,SACA,wBAAIA,UAAU,SACX1B,EACCN,EAAKC,QAAO,SAACC,EAAKa,GAAN,OAAeb,EAAMa,EAAKI,OAAM,GAC5C,IAGJ,wBAAIa,UAAU,SACX1B,EAAaN,EAAKC,QAAO,SAACC,EAAKa,GAAN,OAAeb,EAAMa,EAAKE,UAAS,SCF1DmB,MAxBf,YAAmC,IAAfC,EAAc,EAAdA,KAAMrC,EAAQ,EAARA,KAAQ,EACAsC,mBAAStC,GADT,mBACzBG,EADyB,KACfoC,EADe,KAUhC,OARAC,qBAAU,WACK,KAATH,GACFE,EAAYvC,GAEduC,EACEvC,EAAKyC,QAAO,qBAAGR,KAAgBL,cAAcc,SAASL,EAAKT,qBAE5D,CAAC5B,EAAMqC,IACH,kBAAC,EAAD,CAAOrC,KAAMG,KCAPwC,MAZf,YAAoC,IAAlBN,EAAiB,EAAjBA,KAAMO,EAAW,EAAXA,QAItB,OACE,yBAAKZ,UAAU,UACb,kDACA,2BAAOa,KAAK,OAAOC,SANF,SAACzC,GACpBuC,EAAQvC,EAAE0C,OAAOC,QAK4BA,MAAOX,MCHlDY,EAAgB,CACpBC,SAAS,EACTC,OAAO,GAsCMC,MAnCf,WAAgB,IAAD,EACWd,mBAAS,IADpB,mBACNtC,EADM,KACAqD,EADA,OAEWf,mBAAS,IAFpB,mBAEND,EAFM,KAEAO,EAFA,OAGeN,mBAASW,GAHxB,mBAGNK,EAHM,KAGEC,EAHF,KAKPC,EAAQ,uCAAG,4BAAAlE,EAAA,sEACQD,IADR,QACTc,EADS,QAEFsD,QACXF,EAAU,CAAEL,SAAS,EAAOC,OAAO,IACnCE,EAAQ/B,EAAaR,EAAkBX,MAEvCoD,EAAU,CAAEL,SAAS,EAAOC,OAAO,IANtB,2CAAH,qDAcd,OAJAX,qBAAU,WACRgB,MACC,IAECF,EAAOJ,QACF,yCAGLI,EAAOH,MACF,mDAIP,yBAAKnB,UAAU,gBACb,kBAAC,EAAD,CAAQK,KAAMA,EAAMO,QAASA,IAC7B,kBAAC,EAAD,CAAUP,KAAMA,EAAMrC,KAAMA,M,MCpClC0D,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.21c505cf.chunk.js","sourcesContent":["const branches = [\"branch1.json\", \"branch2.json\", \"branch3.json\"];\n\nexport const getProducts = async () =>\n  await Promise.all(branches.map((b) => fetch(`./api/${b}`)))\n    .then((responses) => Promise.all(responses.map((r) => r.json())))\n    .then((data) =>\n      data.reduce((acc, { products }) => [...acc, ...products], [])\n    )\n    .catch((e) => []);\n","export const formatNumber = (number, decimals = 2) =>\n  new Intl.NumberFormat(\"en\", {\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals,\n  }).format(number);\n\nexport const aggregateProducts = (data) =>\n  data.reduce((acc, curr) => {\n    const row = { ...curr };\n    row.revenue = curr.unitPrice * curr.sold;\n    if (acc.hasOwnProperty(curr.id)) {\n      row.sold += acc[curr.id].sold;\n      row.revenue += acc[curr.id].revenue;\n    }\n    delete row.unitPrice;\n    return { ...acc, [curr.id]: row };\n  }, {});\n\nexport const sortProducts = (data, sortBy = \"name\") =>\n  Object.values(data).sort(function (a, b) {\n    if (sortBy === \"name\") {\n      const itemA = a[sortBy].toLowerCase();\n      const itemB = b[sortBy].toLowerCase();\n      if (itemA < itemB) {\n        return -1;\n      }\n      if (itemA > itemB) {\n        return 1;\n      }\n      return 0;\n    } else {\n      return b[sortBy] - a[sortBy];\n    }\n  });\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { formatNumber } from \"../utils\";\n\nfunction Row({ item }) {\n  return (\n    <tr>\n      <td className=\"left\">{item.name}</td>\n      <td className=\"right\">{formatNumber(item.sold, 0)}</td>\n      <td className=\"right\">{formatNumber(item.revenue)}</td>\n    </tr>\n  );\n}\n\nRow.propTypes = {\n  item: PropTypes.shape({\n    name: PropTypes.string,\n    sold: PropTypes.number,\n    revenue: PropTypes.number,\n  }).isRequired,\n};\n\nexport default Row;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { formatNumber } from \"../utils\";\nimport Row from \"./Row\";\n\nfunction Table({ data }) {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th className=\"left\">Product</th>\n          <th className=\"right\">Units sold</th>\n          <th className=\"right\">Revenue</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((item) => (\n          <Row key={item.id} item={item} />\n        ))}\n      </tbody>\n      <tfoot>\n        <tr>\n          <td className=\"left\">Total</td>\n          <td className=\"right\">\n            {formatNumber(\n              data.reduce((acc, curr) => acc + curr.sold, 0),\n              0\n            )}\n          </td>\n          <td className=\"right\">\n            {formatNumber(data.reduce((acc, curr) => acc + curr.revenue, 0))}\n          </td>\n        </tr>\n      </tfoot>\n    </table>\n  );\n}\n\nTable.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      sold: PropTypes.number,\n      revenue: PropTypes.number,\n    })\n  ).isRequired,\n};\n\nexport default Table;\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Table from \"./Table\";\n\nfunction Products({ term, data }) {\n  const [products, setProducts] = useState(data);\n  useEffect(() => {\n    if (term === \"\") {\n      setProducts(data);\n    }\n    setProducts(\n      data.filter(({ name }) => name.toLowerCase().includes(term.toLowerCase()))\n    );\n  }, [data, term]);\n  return <Table data={products} />;\n}\n\nProducts.propTypes = {\n  term: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      sold: PropTypes.number,\n      revenue: PropTypes.number,\n    })\n  ).isRequired,\n};\n\nexport default Products;\n","import React from \"react\";\n\nfunction Search({ term, setTerm }) {\n  const handleChange = (e) => {\n    setTerm(e.target.value);\n  };\n  return (\n    <div className=\"search\">\n      <label>Search Products</label>\n      <input type=\"text\" onChange={handleChange} value={term} />\n    </div>\n  );\n}\n\nexport default Search;\n","import React, { useEffect, useState } from \"react\";\nimport { getProducts } from \"../api\";\nimport { aggregateProducts, sortProducts } from \"../utils\";\nimport Products from \"./Products\";\nimport Search from \"./Search\";\n\nconst initialStatus = {\n  loading: true,\n  error: false,\n};\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [term, setTerm] = useState(\"\");\n  const [status, setStatus] = useState(initialStatus);\n\n  const loadData = async () => {\n    const products = await getProducts();\n    if (products.length) {\n      setStatus({ loading: false, error: false });\n      setData(sortProducts(aggregateProducts(products)));\n    } else {\n      setStatus({ loading: false, error: true });\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  if (status.loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (status.error) {\n    return <p>Something went wrong</p>;\n  }\n\n  return (\n    <div className=\"product-list\">\n      <Search term={term} setTerm={setTerm} />\n      <Products term={term} data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}